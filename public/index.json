[
{
	"uri": "//localhost:1313/5-cognito/1-create-userpool/",
	"title": "Initialize Cognito User pool",
	"tags": [],
	"description": "",
	"content": "Initialize Cognito User pool Access the AWS Management Console Find Cognito Select Cognito In the Cognito interface Select Create user pool In the Create user pool interface In Step 1 Configure sign-in experience\nFind Cognito user pool sign-in options, select User name and Email Select Next In Step 2 Configure security requirements\nPassword policy mode select Cognito defaults Multi-factor authentication select No MFA Self-service account recovery select Enable self-service account recovery - Recommended Delivery method for user account recovery messages select Email only Select Next In Step 3 Configure sign-up experience\nAll to default - Select Next In Step 4 Configure message delivery\nEmail select Send email with Cognito FROM email address select no-reply@verificationemail.com Select Next In Step 5 Integrate your app\nUser pool name enter FCJUserPool Select Use the Cognito Hosted UI Domain type select Use a Cognito domain Cognito domain enter Cognito login domain name that you want App type select Public client App client name enter FCJ-Client Allowed callback URLs enter http://\u0026lsquo;domain name assigned to your website\u0026rsquo;/contact-me.html The 1st web interface is /index.html and the 2nd web interface is /contact-me.html. When filling in Allowed callback URLs there must be /contact-me.html after your domain name, so that from the interface of /index.html can callback to /contact-me.html.\nScroll down to find Advanced app client settings OAuth 2.0 grant types, uncheck Authorization code grant and select Implicit grant OpenID Connect scopes select OpenID, Phone, Email, aws.cognito.signin.user.admin, Profile Allowed sign-out URLs - optional enter http://\u0026lsquo;domain name assigned to your site\u0026rsquo;/index.html Scroll down and select Next In Step 6 Review and create Check again and select Create user pool "
},
{
	"uri": "//localhost:1313/2-preparation/1-clone-code/",
	"title": "Clone a Repository from Github",
	"tags": [],
	"description": "",
	"content": "Clone a Repository from Github Go to the directory where you want to clone the repository from Github.\nOpen Command Prompt\nRun the following command to clone the repository to your computer: git clone https://github.com/conglytran0301/Serverless.git You need to install Git on your computer to be able to use the git clone command.\nAfter the git clone command is complete, you will have a copy of the repository on your computer and be able to work with that source code. The code in the repository includes: Front-end website, Python for Lambda function and Backend API.\n"
},
{
	"uri": "//localhost:1313/3-deployment-frontend/1-s3-bucket/1-create-s3/",
	"title": "Create an S3 bucket",
	"tags": [],
	"description": "",
	"content": "Create an S3 bucket Access the AWS Management Console Find S3\nSelect S3\nIn the S3 interface Select Buckets Select Create bucket In the Create bucket interface Bucket name, enter s3-workshop-fcj In the Object Ownership section, select ACLs disabled Note: Because the bucket name is unique on a global scale, if the names are the same, the message \u0026ldquo;Bucket with the same name already exists\u0026rdquo; will appear. Therefore, it is necessary to add a few numbers after it to make your bucket name suitable for the policy.\nIn the Block Public Access settings for this bucket section, leave the default The rest remains the default. Scroll down and select Create bucket Finish creating an S3 bucket to store source website "
},
{
	"uri": "//localhost:1313/8-api-gateway/1-create-api/",
	"title": "Create API",
	"tags": [],
	"description": "",
	"content": "Create API Access the AWS Management Console Find API Select API Gateway In the APIs interface Select Create API In the Create API interface Find REST API and select Build In the Create REST API interface Select New API API name enter FCJ-APIGateway API endpoint type select Regional Select Create API After creating the API Go to Resources Select Create resource In the Create resource interface Resource name enter serverless Select Create resource "
},
{
	"uri": "//localhost:1313/3-deployment-frontend/2-cloudfront/1-create-cloudfront/",
	"title": "Create Cloudfront",
	"tags": [],
	"description": "",
	"content": "Create Cloudfront Access the AWS Management Console Find Cloudfront Select Cloudfront In the Cloudfront interface Select Distributions Select Create distribution In the Create distribution interface Origin domain, select the name of the created S3 bucket Origin access, select Origin access control settings (recommended) Origin access control, select Create new OAC In the Create new OAC interface, leave it to default. Then select Create After Create new OAC, select the OAC you just created Scroll down to the Viewer protocol policy section, select Redirect HTTP to HTTPS\nIn the Allowed HTTP methods section, select GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE\nIn the Web Application Firewall (WAF) section, select Do not enable security protections The rest is left to default. Scroll down and select Create distribution Congratulations on successfully creating Distribution The initialization process will take 4-5 minutes to complete. "
},
{
	"uri": "//localhost:1313/3-deployment-frontend/1-s3-bucket/",
	"title": "Initialize an S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Initialize an S3 bucket In this lab, we\u0026rsquo;ll create an S3 bucket and then upload the data to prepare for hosting a static website.\nContent Create an S3 bucket Upload Data Enable Static website hosting "
},
{
	"uri": "//localhost:1313/1-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Workflow 1. User Accesses the Application via Web Browser\nWhen a user wants to access the application, they enter the website URL in the browser. This can be a website providing static content (HTML, CSS, JavaScript) or interactive features like login, registration, or data manipulation. The access request is sent from the browser over the Internet to the AWS system for processing. 2. Route 53 Resolves Domain Name and Directs Request\nFirst, the request from the browser is sent to Amazon Route 53, AWS’s DNS (Domain Name System) service. Route 53\u0026rsquo;s job is to resolve the domain name of the application into a specific IP address, helping to route traffic to the correct resources in the AWS system. Route 53 can be configured to support load balancing between multiple servers or geographical regions to optimize access speed and ensure high availability.\nOnce the domain is resolved, the user\u0026rsquo;s request is forwarded to CloudFront, AWS’s content delivery network (CDN).\n3. CloudFront Receives Request and Checks Cache\nAmazon CloudFront acts as a Content Delivery Network (CDN), distributing content from edge locations (network points closest to the user) to reduce latency and improve website performance.\nWhen CloudFront receives the request from the user, it checks if static resources (like HTML, CSS, JavaScript files, images) are available in the cache of the closest edge location. If the resource is cached, CloudFront returns it immediately without needing to access the backend, reducing response time.\nIf the resource is not cached, CloudFront fetches the static files from Amazon S3, the main storage for the application’s static content, and delivers it to the user.\n4. Amazon S3 Supplies Static Content to CloudFront\nAmazon S3 (Simple Storage Service) is used to store static files for the application such as images, videos, CSS, and JavaScript. It’s a highly durable and scalable storage service. When CloudFront doesn’t find the resource in its cache, it requests the static content from S3 and caches it temporarily for future requests. 5. Web Application Firewall (WAF) Protects the System\nAWS WAF (Web Application Firewall) is integrated with CloudFront to protect the system from common attacks, such as SQL Injection, Cross-Site Scripting (XSS), and DDoS (Distributed Denial of Service) attacks.\nWAF can be configured with specific security rules to inspect and block malicious requests before they reach the application, thus safeguarding the system from common vulnerabilities.\n6. Certificate Manager Handles SSL Certificates for Data Encryption\nAmazon Certificate Manager (ACM) manages SSL/TLS certificates for the system, ensuring that all communications between the user and the system are encrypted, protecting information from man-in-the-middle attacks.\nCertificate Manager automatically handles SSL certificate management and renewal to ensure secure connections are always functional. This is especially crucial in environments where high data security is required.\n7. User Authentication via Cognito User Pool\nFor requests requiring authentication (e.g., login, registration), the user interacts with Amazon Cognito User Pool, a user identity management service.\nCognito allows users to log in or sign up for accounts on the application. When the user provides login credentials (email, password), Cognito authenticates the credentials and issues JWT tokens to authorize subsequent requests from the user.\nAdditionally, Cognito supports multi-factor authentication (MFA) and integrates with external services like Facebook, Google for convenient user login.\n8. API Gateway Handles Dynamic Requests from Users\nFor complex requests such as retrieving data from a database or processing backend tasks, the user’s request is sent from the browser via API Gateway.\nAmazon API Gateway acts as a gateway between the user and backend services. It receives HTTP(S) requests and forwards them to AWS Lambda for processing. API Gateway can integrate with Cognito to verify user tokens before granting access to sensitive resources.\nAdditionally, API Gateway supports version control for APIs, throttling, and request monitoring to ensure performance and security.\n9. Lambda Executes Business Logic\nAWS Lambda is a serverless compute service that only runs when triggered by events. When API Gateway forwards a request from the user, Lambda executes the business logic of the application without the need to manage servers.\nLambda can perform various tasks such as handling login information, retrieving data from the database, or invoking other services for complex processing. Lambda automatically scales to meet the demand and charges only for the execution time, making it cost-effective for the system.\n10. DynamoDB Stores and Retrieves Dynamic Data\nAmazon DynamoDB is a NoSQL database that offers flexible scaling. When Lambda needs to retrieve or write data, it interacts with DynamoDB.\nDynamoDB stores the dynamic data of the application, such as user information, transaction states, or application-related data. DynamoDB supports very fast read/write speeds and handles large data volumes, ensuring smooth operation even when many users access the application simultaneously.\n11. SNS Sends Notifications\nWhen important events or state changes occur in the application (e.g., a new user registration or a new order), Lambda can trigger Amazon SNS (Simple Notification Service) to send notifications.\nSNS can send notifications through various channels such as email, SMS, or to other systems using a pub/sub mechanism. This allows the application to provide real-time information to users or administrators.\n12. User Receives Response\nAfter the requests have been processed by Lambda and data has been retrieved from DynamoDB or other sources, API Gateway receives the response from Lambda and forwards the results back to the user’s browser.\nFinally, the user receives the data they requested, or relevant notifications (such as account registration confirmation, order updates, etc.).\nSummary Each step in the system plays a crucial role in handling user requests from accessing the website, sending requests, to receiving responses. The serverless system leverages services like CloudFront, Lambda, and API Gateway to reduce infrastructure management while ensuring the application’s performance and security. Components such as Cognito, DynamoDB, and SNS provide easy user management, data storage, and notification capabilities, allowing for the development of a highly scalable and robust distributed application.\nContent Routing, Content Distribution, and Security Logic Processing, User Management, and System Interaction "
},
{
	"uri": "//localhost:1313/1-introduction/1-frontend/",
	"title": "Routing, Content Distribution, and Security",
	"tags": [],
	"description": "",
	"content": "Overview 1. Route53: is a highly scalable DNS (Domain Name System) service from AWS. It helps convert easy-to-remember domain names that users type into their browsers into the IP addresses of AWS resources.\nBenefits: Route 53 ensures the routing of traffic to the right AWS resources with high reliability and speed. It also offers DNS management, health checks, and geo-based routing, which optimizes the global user experience.\n2. CloudFront: is an AWS content delivery network (CDN) that delivers static content such as images, videos, and documents from the servers closest to the user.\nBenefits: CloudFront minimizes latency and speeds up website loading thanks to global edge locations. It also integrates with AWS security services such as AWS WAF and AWS Shield to protect content from online threats.\n3. S3 (Simple Storage Service): is AWS\u0026rsquo;s highly scalable object storage service, designed to store and retrieve any amount of data from anywhere on the web.\nBenefits: S3 provides reliable, highly secure storage at a reasonable cost. You only pay for the amount and amount of data used, which optimizes operating costs.\n4. WAF (Web Application Firewall): is a web application firewall that helps protect web applications from common attacks such as SQL injection and cross-site scripting (XSS).\nBenefits: WAFs allow you to create custom security rules to protect your applications, while also providing the ability to monitor traffic and prevent threats before they can cause damage.\n5. AWS Certificate Manager: makes it easier to manage SSL/TLS certificates, from issuance, renewal, to deploying them on other AWS services such as CloudFront.\nBenefits: Automated SSL/TLS certificate management secures communication between your users and applications without having to worry about manually renewing or configuring certificates.\nReference Links Amazon Route 53 Documentation Amazon CloudFront Documentation Amazon S3 Documentation AWS WAF Documentation AWS Certificate Manager Documentation "
},
{
	"uri": "//localhost:1313/",
	"title": "Serverless Web Application Building on AWS",
	"tags": [],
	"description": "",
	"content": "Serverless Web Application Building on AWS Overview In this article, we will build a Web application system that uses Serverless services on the AWS platform. It leverages services such as S3 for static content storage, API Gateway for managing and routing API requests, Lambda for business logic processing, and DynamoDB for dynamic data storage. Additional services such as Route53, CloudFront, and WAF help ensure high performance and security for applications. In addition, Cognito is used to manage user authentication, and SNS helps send instant notifications. Overall, this architecture provides flexibility, scalability, and cost-effectiveness, while optimizing user experience and system security.\nContent Introduction Preparation Steps Front-end deployment Initialize SNS Initialize Cognito Initialize DynamoDB Deploy Lambda function Setting up API Gateway Check Web Application Clean up resources "
},
{
	"uri": "//localhost:1313/5-cognito/2-test-userpool/",
	"title": "Check out Cognito User pool",
	"tags": [],
	"description": "",
	"content": "Check out Cognito User pool In the User pool interface Select the User pool that you just created Select App integration Scroll down to the App clients and analytics section Select the App client name you created Scroll down to the Hosted UI section Select View Hosted UI You have opened the account registration page of Cognito, but you have not yet entered the 1st interface (/index.html). To access this interface, you need to add the link URL of Cognito to your website code.\nIn the Login interface of Cognito Select copy the link on Cognito\u0026rsquo;s login page Open the code you cloned Select the file index.html. Find line \u0026ldquo;Change - Sign in Link\u0026rdquo; and paste the link. Next, select the file contact-me.html. Find line \u0026ldquo;Change - SignOut URL\u0026rdquo; and paste the link. The SignIn and SignOut paths have the following structure:\nMAKE URL OF SIGN IN /login?client_id=\u0026amp;response_type=token\u0026amp;scope=aws.cognito.signin.user.admin+email+openid+phone+profile\u0026amp;redirect_uri=\nMAKE URL OF SIGN OUT /logout?client_id=\u0026amp;response_type=token\u0026amp;scope=aws.cognito.signin.user.admin+email+openid+phone+profile\u0026amp;redirect_uri=\nThen go to the main.js file Find window.location.href and paste your domain name with the /index.html. Then update again on your S3. Go back to the website interface After updating on S3, you return to the Hosted UI interface Select View Hosted UI At this time, you have entered the 1st website Select LOGIN Select Sign up to register for an account Username enter \u0026lsquo;Your Username\u0026rsquo; Email enter \u0026lsquo;Your Email\u0026rsquo; Password enter \u0026lsquo;Your Password\u0026rsquo; Go to the Email you just registered to get code Code has been sent to your Email Copy the code and paste it into the box of Verification code Then select Confirm account Congratulations, you have successfully registered an account and entered the 2nd interface "
},
{
	"uri": "//localhost:1313/3-deployment-frontend/2-cloudfront/2-cloudfront-s3policy/",
	"title": "Cloudfront Origin request policy",
	"tags": [],
	"description": "",
	"content": "Cloudfront Origin request policy In the Distributions interface Select the Distributions you just created Select Origins - Select the Origin name you just created Select Edit On the Edit origin interface - Select the OAC you just created. Select Copy policy - Redirect to the S3 bucket you created After entering your Bucket, select Permissions Scroll down to find Bucket policy, select Edit Paste the code into the S3 Bucket policy - Select Save changes You have successfully created an Origin request policy "
},
{
	"uri": "//localhost:1313/3-deployment-frontend/2-cloudfront/",
	"title": "Configure Cloudfront",
	"tags": [],
	"description": "",
	"content": "Configure Cloudfront CloudFront is AWS\u0026rsquo;s CDN, accelerating content delivery from origins like S3. Configuring Origin Request Policy and Lambda@Edge helps optimize and customize requests before reaching the origin.\nContent Create Cloudfront Cloudfront Origin request policy Lambda@Edge Configuration for Origin Website "
},
{
	"uri": "//localhost:1313/8-api-gateway/2-create-method/",
	"title": "Create Method",
	"tags": [],
	"description": "",
	"content": "Create Method In the Resources interface Select Create method In the Create method interface Method type select GET Integration type select Lambda function Lambda function select the Lambda named FCJ-LambdaFunction that you created Scroll down and select Create method "
},
{
	"uri": "//localhost:1313/2-preparation/2-domain-name/",
	"title": "Domain Name Registration",
	"tags": [],
	"description": "",
	"content": "Register a domain name with Amazon Route 53 Access the AWS Management Console Find Route 53 Select Route 53 . In the Route 53 interface\nSelect Registered domains In the Registered domains interface Enter the domain name you want to register\nSelect Search\nClick Select the domain name you want to register\nSelect Proceed to checkout\nIn the Pricing section Choice of subscription and renewal time\nSelect Next\nIn the Contact information section Fill in contact information\nSelect Next\nIn the Review and submit section Double-check information Select Submit Check the domain name Go to Registered domains to check the registered domain name information. If your domain name registration fails, please contact AWS Support for assistance.\nRegister a domain name with another domain provider Go to the Console of the domain provider you purchased Select Manage Domain Name\nSelect the domain name that you registered\nSelect Name Server\nEnter the Name Server provided in Route53\u0026rsquo;s Hosted zones\nTo be able to create DNS from another domain provider to AWS, you need to create Hosted zones in Route 53. Then enter the Name Server provided by Route 53 into the Name Server import of another domain provider. steps to register for Hosted zones you see the instructions at here: \u0026ldquo;Configure Route 53 and Certificate Manager\u0026rdquo;. Note: Changes may take up to 24 hours to take effect.\n"
},
{
	"uri": "//localhost:1313/1-introduction/2-system/",
	"title": "Logic Processing, User Management, and System Interaction",
	"tags": [],
	"description": "",
	"content": "Overview 1. API Gateway: is a powerful AWS API management service that helps you create, deploy, and manage RESTful APIs with ease.\nBenefits: API Gateway provides traffic management, performance monitoring, and API security, helping to ensure that your application can handle millions of requests with high reliability and performance.\n2. Lambda: is a serverless computing service that allows you to run code without managing servers. All you need to do is provide the code, and Lambda will automatically handle everything needed to run and scale the code.\nBenefits: With Lambda, you only pay for the execution time of your code, which optimizes costs and eliminates the need to manage infrastructure. Lambda also automatically scales to meet the needs of the application.\n3. DynamoDB: is a highly scalable NoSQL database designed to handle any workload with low latency.\nBenefits: DynamoDB provides reliable performance, with auto-scaling, helping you build applications that can handle millions of requests per second without performance struggles.\n4. Cognito: provides user management and authentication services, allowing users to securely register, log in, and access resources.\nBenefits: Cognito simplifies user management and integrates with other AWS services to provide comprehensive security and easy access management.\n5. SNS (Simple Notification Service): is AWS\u0026rsquo;s global messaging service that allows you to send notifications from the system to users via email, SMS, or to other systems.\nBenefits: SNS helps ensure that important notifications and information are sent quickly and efficiently, supporting the tracking and management of app activity.\nReference Links Amazon API Gateway Documentation AWS Lambda Documentation Amazon DynamoDB Documentation Amazon Cognito Documentation Amazon SNS Documentation "
},
{
	"uri": "//localhost:1313/2-preparation/",
	"title": "Preparation steps",
	"tags": [],
	"description": "",
	"content": "Thorough preparation of each component will help you implement this architecture efficiently and ensure that the application works stably.\nContent Clone repository from Github Domain name registration "
},
{
	"uri": "//localhost:1313/3-deployment-frontend/1-s3-bucket/2-upload-s3/",
	"title": "Upload Data",
	"tags": [],
	"description": "",
	"content": "Upload Data we\u0026rsquo;ll upload source code to the S3 bucket for storage. If you haven\u0026rsquo;t downloaded the source code yet, go back to 2.1.Clone repository from Github to clone the repo.\nIn the S3 bucket you just created There is currently no Object in Bucket Select Upload to upload your data In the Upload interface Go to the Folder named FCJ-Serverless that was cloned from Github in the above step Press CRLT + A key combination to select all folders Then drag the entire Folder and File and drop it into the Upload interface of the S3 bucket. Once all folders have been selected, drop them into Bucket Scroll down to the bottom of the page and select Upload Once the Upload is complete, you will see the files that have been added to the S3 Bucket "
},
{
	"uri": "//localhost:1313/3-deployment-frontend/3-route53-acm/",
	"title": "Configure Route 53 and Certificate Manager",
	"tags": [],
	"description": "",
	"content": "Configure Route 53 Access the AWS Management Console Find Route 53 Select Route 53 Trong giao diện Route 53 Find Hosted zones Select Create hosted zone In the Create hosted zone interface Write the Domain name registered in the previous post In the Type section, select Public hosted zone Select Create hosted zone Return to the Hosted zones interface Go to the Hosted zone name you just created Select Create record In the Create record interface Record type select CNAME Record name enter \u0026lsquo;workshop\u0026rsquo; Value enter Distribution domain name of Cloudfront (e.g. \u0026lsquo;https://d23akwur3rh4c.cloudfront.net\u0026rsquo;) - Select Create records Configuring the Certificate Manager Access the AWS Management Console Find Certificate Manager Select Certificate Manager In the Certificate Manager interface Moved Region to N.Virginia Select Request certificate Certificate type select Request a public certificate Select Next In the Request public certificate section Domain names enter workshop.conglyblog.id.vn The rest keeps the default - Scroll down and select Request After the Request is successful Find Domains Select Create records in Route 53 records have now been created Go to Route 53 and check again Congratulations, you have successfully created a Certificate for your domain name. "
},
{
	"uri": "//localhost:1313/8-api-gateway/3-create-authorizers/",
	"title": "Create Authorizer",
	"tags": [],
	"description": "",
	"content": "Create Authorizer In the API Select Authorizers Select Create authorizer In the Create authorizer interface Authorizer name enter FCJ-Auth Authorizer type select Cognito Cognito user pool select FCJ-UserPool Token source enter Authorization Select Create authorizer Go to the Resources interface Select GET Select Method request Select Edit 4. In the Edit method request interface\nAuthorization select FCJ-Auth Authorization scopes enter email, then select add Scroll down and select Save "
},
{
	"uri": "//localhost:1313/3-deployment-frontend/1-s3-bucket/3-web-hosting/",
	"title": "Enable Static website hosting",
	"tags": [],
	"description": "",
	"content": "Enable Static website hosting Go to the created S3 bucket Select Properties In the Properties interface Scroll down to find Static website hosting and select Edit In the interface Edit static website hosting In the Static website hosting section, select Enable In the Hosting type section, select Host a static website In the Index document section, enter index.html In the Error document section, enter error.html Scroll down and select Save changes "
},
{
	"uri": "//localhost:1313/3-deployment-frontend/",
	"title": "Front-end Web Deployment",
	"tags": [],
	"description": "",
	"content": "The web frontend in this architecture is the user interface part of the application, which is deployed and managed on AWS services to ensure efficiency and security. Frontend static content, including HTML, CSS, and JavaScript, is stored on an object hosting service, which is then delivered to users through a content delivery network (CDN). This helps to ensure that the website loads quickly and works stably across the globe. For security, the frontend is protected by a web application firewall (WAF) and uses SSL/TLS certificates, which are managed through AWS services, ensuring user data is encrypted and secure. In addition, the AWS DNS system is configured to direct domain names to the necessary resources, creating a robust and secure frontend web architecture.\nContent Initialize an S3 Bucket Configure Cloudfront Configure Route 53 and Certificate Manager WAF Initialization "
},
{
	"uri": "//localhost:1313/3-deployment-frontend/2-cloudfront/3-lambda-edge/",
	"title": "Lambda@Edge Configuration for Origin Website",
	"tags": [],
	"description": "",
	"content": "Lambda@Edge Configuration for Origin Website In the Cloudfront interface Select Functions Select Create function In the Create function interface Enter Name: fcj-lambda-edge In the Runtime section, select cloudfront-js-2.0 Select Create function In the Functions interface Select the Functions that you just created Scroll down to the Build section In the Function code section, select Development Copy this code to: function handler(event) {\rvar request = event.request;\rvar uri = request.uri;\r// Check whether the URI is missing a file name.\rif (uri.endsWith(\u0026#39;/\u0026#39;)) {\rrequest.uri += \u0026#39;index.html\u0026#39;;\r}\r// Check whether the URI is missing a file extension.\relse if (!uri.includes(\u0026#39;.\u0026#39;)) {\rrequest.uri += \u0026#39;/index.html\u0026#39;;\r}\rreturn request;\r} Then select Save changes Go to Publish Select Publish function Return to the Distributions interface Select the Distributions you created Select Behaviors Select Behavior with origin forward to your S3 Then select Edit In the Edit interface Scroll down to find Function associations- optional Configuration with Viewer request Function type select CloudFront Functions Function ARN/Name select fcj-lambda-edge you just created above Select Save changes "
},
{
	"uri": "//localhost:1313/4-sns/",
	"title": "Initialize SNS",
	"tags": [],
	"description": "",
	"content": "Initialize SNS Access the AWS Management Console Find SNS Select Simple Notification Servicet In the interface of SNS In the Create topic section, enter the Topic name: FCJ-SNSTopic Select Next step In the interface of Create topic In the Type section, select Standard. The rest keeps the default Scroll down to the bottom of the page and select Create topic After creating a topic, select Subscriptions in the left sidebar Select Create subscription In the Create subscription interface In the Topic ARN section, select the Topic you just created Protocol select Email Endpoint enter your personal email Then select Create subscription After Create subscription Go to the email you entered when you created your subscription\nSelect Confirm subscription to confirm the subscription\nYou have completed Confirm subscription After selecting Confirm subscription you just need to exit and you\u0026rsquo;re done. (If you choose click here to unsubscribe, you will unsubscribe and will not be able to receive email information).\n"
},
{
	"uri": "//localhost:1313/8-api-gateway/4-create-stages/",
	"title": "Create Stage",
	"tags": [],
	"description": "",
	"content": "Create Stage In the API interface you created Select Resources Select Deploy API In the Deploy API interface Stage Select New stage Stage name enter Dev Select Deploy "
},
{
	"uri": "//localhost:1313/3-deployment-frontend/4-waf/",
	"title": "WAF Initialization",
	"tags": [],
	"description": "",
	"content": "WAF Initialization When you create a Web ACL, it will cost you $5 for 1 month of use.\nAccess the AWS Management Console Find WAF Select WAF In the WAF interface Select Create web ACL In the Create web ACL interface Step 1 Describe web ACL and associate it to AWS resources\nResource type select Amazon CloudFront distributions Name enter WAF-Demo Associated AWS resources select Add AWS resources Select the domain name you registered for Cloudfront\nThen select Add\nCloudFront distributions select Default Select Next Step 2 Add rules and rule groups\nRules select Add rules\nSelect Add managed rule groups\nSelect AWS managed rule groups Find the Free rule groups section Amazon IP reputation list select Add to web ACL Scroll down and select Add rules Default action select Allow Select Next Step 3 Set rule priority\nSelect Next Step 4 Configure metrics\nSelect Next Double-check and select Create web ACL "
},
{
	"uri": "//localhost:1313/5-cognito/",
	"title": "Initialize Cognito",
	"tags": [],
	"description": "",
	"content": "Content:\nInitialize Cognito User pool Check out Cognito User pool "
},
{
	"uri": "//localhost:1313/8-api-gateway/5-enable-cors/",
	"title": "CORS Configuration Setup",
	"tags": [],
	"description": "",
	"content": "CORS Configuration Setup In the API interface Select Resources Select /serverless Select Enable CORS In the Enable CORS interface Gateway responses select Default 4XX and Default 5XX Access-Control-Allow-Methods select GET Access-Control-Allow-Headers enter Authorization at the end of the line Select Save "
},
{
	"uri": "//localhost:1313/8-api-gateway/6-config-api/",
	"title": "API Configuration",
	"tags": [],
	"description": "",
	"content": "API Configuration In the API interface Select Stages Select Dev Copy Invoke URL \u0026lsquo;https://7s5pb02ska.execute-api.ap-southeast-1.amazonaws.com/Dev' In the code web interface Find the file api.js Paste the Invoke URL into line 8 and add /serverless after it. Save and upload to S3 "
},
{
	"uri": "//localhost:1313/6-dynamodb/",
	"title": "Initialize DynamoDB",
	"tags": [],
	"description": "",
	"content": "Initialize DynamoDB Access the AWS Management Console Find DynamoDB Select DynamoDB In the Dashboard interface of DynamoDB - Select Create table In the Create table interface Table name enter FCJ-DynamoDB Partition key enter id select string Sort key enter name select string Table settings to default Scroll down and select Create table "
},
{
	"uri": "//localhost:1313/7-lambda-function/",
	"title": "Deploy Lambda function",
	"tags": [],
	"description": "",
	"content": "Deploy Lambda function Access the AWS Management Console Find Lambda Select Lambda In the Lambda interface Select Create a function In the Create function interface Select Author from scratch Function name enter FCJ-LambdaFunction Runtime select Python 3.9 Architecture select x86_64 Scroll down and select Create function Once created, you will see the following interface Enter the Source code for the Lambda Function Select Code Paste code into the import boto3\rimport uuid\r# Tạo tài nguyên DynamoDB\rdynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;)\r# Đặt tên bảng DynamoDB\rtable = dynamodb.Table(\u0026#39;FCJ-DynamoDB\u0026#39;)\r# Tạo một SNS Client\rclient_sns = boto3.client(\u0026#39;sns\u0026#39;)\r# Hàm này sẽ được kích hoạt bởi API Gateway\rdef lambda_handler(event, context):\rtry:\r# Kiểm tra sự tồn tại của các key bắt buộc\rrequired_keys = [\u0026#39;name\u0026#39;, \u0026#39;email\u0026#39;, \u0026#39;subject\u0026#39;, \u0026#39;description\u0026#39;]\rfor key in required_keys:\rif key not in event:\rraise KeyError(f\u0026#34;Missing required key: {key}\u0026#34;)\r# Tạo một ID người dùng\rid = str(uuid.uuid4())\r# Gửi tin nhắn đến SNS\rhandle_sns(id, event)\r# Lưu trữ dữ liệu vào DynamoDB\rstatusCode = handle_dynamo_db(id, event)\rreturn {\r\u0026#39;statusCode\u0026#39;: statusCode,\r}\rexcept KeyError as ke:\rreturn {\r\u0026#39;statusCode\u0026#39;: 400,\r\u0026#39;body\u0026#39;: json.dumps(f\u0026#34;Missing required key: {str(ke)}\u0026#34;)\r}\rexcept Exception as e:\rreturn {\r\u0026#39;statusCode\u0026#39;: 500,\r\u0026#39;body\u0026#39;: json.dumps(\u0026#39;Error occurred: \u0026#39; + str(e))\r}\r# Gửi một tin nhắn đến SNS\rdef handle_sns(id, event):\rtry:\rsns_message = f\u0026#34;\u0026#34;\u0026#34;\rYou got a new Message from https://workshop.conglyblog.id.vn\rThe message is as follows\rid : {id}\rName : {event[\u0026#39;name\u0026#39;]}\remail : {event[\u0026#39;email\u0026#39;]}\rMessage : {event[\u0026#39;description\u0026#39;]}\rSubject : {event[\u0026#39;subject\u0026#39;]}\r\u0026#34;\u0026#34;\u0026#34;\rclient_sns.publish(\r# Thay đổi ARN với ARN của SNS của bạn\rTopicArn=\u0026#39;arn:aws:sns:ap-southeast-1:336760284039:FCJ-SNSTopic\u0026#39;,\rMessage=sns_message,\rSubject=event[\u0026#39;subject\u0026#39;]\r)\rexcept KeyError as ke:\rprint(f\u0026#34;Key error: {ke}\u0026#34;)\rraise\rexcept Exception as e:\rprint(f\u0026#34;An error occurred when sending SNS: {e}\u0026#34;)\rraise\r# Thêm một mục vào bảng DynamoDB\rdef handle_dynamo_db(id, event):\rtry:\rresponse = table.put_item(\rItem={\r\u0026#39;id\u0026#39;: id,\r\u0026#39;name\u0026#39;: event[\u0026#39;name\u0026#39;],\r\u0026#39;email\u0026#39;: event[\u0026#39;email\u0026#39;],\r\u0026#39;subject\u0026#39;: event[\u0026#39;subject\u0026#39;],\r\u0026#39;description\u0026#39;: event[\u0026#39;description\u0026#39;],\r}\r)\rreturn response[\u0026#39;ResponseMetadata\u0026#39;][\u0026#39;HTTPStatusCode\u0026#39;]\rexcept Exception as e:\rprint(f\u0026#34;An error occurred when writing to DynamoDB: {e}\u0026#34;)\rraise Change this domain name of the code above: \u0026ldquo;You got a new Message from https://workshop.conglyblog.id.vn\u0026rdquo; to your domain name.\nSelect Deploy Configure IAM Roles for Lambda Select Configuration Select Permissions Redirect to IAM Roles In the Permissions interface Select Add permissions Select Attach policies Search for SNS Select AmazonSNSFullAccess Go ahead, looking for DynamoDB Select AmazonDynamoDBFullAccess Select Add permissions "
},
{
	"uri": "//localhost:1313/8-api-gateway/",
	"title": "Setting up API Gateway",
	"tags": [],
	"description": "",
	"content": "Nội dung:\nCreate API Create Method Create Authorizer Create Stage CORS Configuration Setup API Configuration "
},
{
	"uri": "//localhost:1313/9-test-webapp/",
	"title": "Check Web Application",
	"tags": [],
	"description": "",
	"content": "Check Web Application Enter the browser interface Enter the domain name you created for your website (e.g. \u0026lsquo;https://workshop.conglyblog.id.vn/index.html') Select LOGIN In the Login interface Enter Username Enter Password Select Sign in In the Contact interface - Enter your information Select Send Message If the message is Successfully Sent the Message, you\u0026rsquo;ve sent the message. Go to Email to check Go to the Email you registered on SNS\nYou can see, the message has been sent to your Email.\nGo to DynamoDB test Go to DynamoDB Select Explore items Select the Items returned that you received When you enter, you will see the sender\u0026rsquo;s information "
},
{
	"uri": "//localhost:1313/10-clean-resource/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "We will proceed with the following steps to delete the resources we created in this exercise.\nDelete S3 Access the interface of S3 Select Buckets Select the Bucket name you created Select Delete Remove Cloudfront Access the interface of Cloudfront Select Distributions Select the Distribution ID you created Select Disable Wait for a few minutes, then select Delete Delete Route 53 Access the interface of Route 53 Select Hosted zones Select the Hosted zone name you created Select Delete Delete SNS Access the interface of SNS Select Topics Select the Topic name you created Select Delete Remove Cognito Access the interface of Cognito Select User pools Select the User pool name you have created Select Delete Deleting DynamoDB Access the interface of DynamoDB Select Tables Select the Table name you created Select Delete Deleting Lambda Access the interface of Lambda Select Functions Select the Function name you created Select Actions Select Delete Deleting API Gateway Access the interface of API Gateway Select APIs Select the API name you created Select Delete Delete WAF Access the interface of WAF Select Web ACLs Select the Web ACL name you created Select Delete "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]